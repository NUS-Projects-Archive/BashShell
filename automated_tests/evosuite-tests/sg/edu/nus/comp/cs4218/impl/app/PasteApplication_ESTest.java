/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 04:06:27 GMT 2024
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.junit.Test;

import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

import sg.edu.nus.comp.cs4218.impl.app.PasteApplication;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PasteApplication_ESTest extends PasteApplication_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "-";
        Boolean boolean0 = Boolean.valueOf("-");
        PasteApplication pasteApplication0 = new PasteApplication();
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        String string0 = pasteApplication0.mergeFileAndStdin(boolean0, byteArrayInputStream0, stringArray0);
        assertEquals(0, byteArrayInputStream0.available());
        assertEquals("\u0000\u0000\u0000\u0000\u0000", string0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "-";
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.TRUE;
        InputStream inputStream0 = InputStream.nullInputStream();
        String string0 = pasteApplication0.mergeFileAndStdin(boolean0, inputStream0, stringArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.TRUE;
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        String[] stringArray0 = new String[0];
        try {
            pasteApplication0.mergeFileAndStdin(boolean0, pipedInputStream0, stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.valueOf("Null arguments");
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        try {
            pasteApplication0.mergeFileAndStdin(boolean0, mockFileInputStream0, (String[]) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        try {
            pasteApplication0.mergeFileAndStdin((Boolean) null, (InputStream) null, (String[]) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: Null Pointer Exception
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.valueOf(true);
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-246), 1663);
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        stringArray0[1] = ".";
        String string0 = pasteApplication0.mergeFileAndStdin(boolean0, byteArrayInputStream0, stringArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "-";
        MockPrintStream mockPrintStream0 = new MockPrintStream("-");
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.FALSE;
        String string0 = pasteApplication0.mergeFile(boolean0, stringArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        String[] stringArray0 = new String[1];
        FileSystemHandling.shouldAllThrowIOExceptions();
        stringArray0[0] = "-";
        MockPrintStream mockPrintStream0 = new MockPrintStream("-");
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.FALSE;
        try {
            pasteApplication0.mergeFile(boolean0, stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: Simulated IOException
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Boolean boolean0 = Boolean.valueOf(false);
        PasteApplication pasteApplication0 = new PasteApplication();
        String[] stringArray0 = new String[0];
        try {
            pasteApplication0.mergeFile(boolean0, stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        try {
            pasteApplication0.mergeFile((Boolean) null, (String[]) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Boolean boolean0 = Boolean.TRUE;
        PasteApplication pasteApplication0 = new PasteApplication();
        InputStream inputStream0 = InputStream.nullInputStream();
        String string0 = pasteApplication0.mergeStdin(boolean0, inputStream0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.FALSE;
        try {
            pasteApplication0.mergeStdin(boolean0, (InputStream) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: Null Pointer Exception
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-246), 1663);
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        stringArray0[1] = ".";
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1663);
        OutputStream outputStream0 = OutputStream.nullOutputStream();
        pasteApplication0.run(stringArray0, bufferedInputStream0, outputStream0);
        assertEquals(2, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("-");
        PasteApplication pasteApplication0 = new PasteApplication();
        String[] stringArray0 = new String[0];
        try {
            pasteApplication0.run(stringArray0, (InputStream) null, mockPrintStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: InputStream not provided
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("-");
        PasteApplication pasteApplication0 = new PasteApplication();
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        String[] stringArray0 = new String[0];
        pasteApplication0.run(stringArray0, byteArrayInputStream0, mockPrintStream0);
        assertEquals(0, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        try {
            pasteApplication0.run((String[]) null, pipedInputStream0, (OutputStream) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: Null Pointer Exception
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }
}
